#include "hufstr.h" 

#include <sstream>

std::vector<uint8_t> table =
{
  0x20, 0x03, 0x65, 0x03, 0x61, 0x04, 0x69, 0x04, 0x6C, 0x04, 0x6E, 0x04, 0x6F, 0x04, 0x72, 0x04, 0x63, 0x05, 0x64, 0x05, 0x73, 0x05, 0x74, 0x05, 0x75, 0x05, 0x27, 0x06, 0x2C, 0x06, 0x67, 0x06, 0x6D, 0x06, 0x70, 0x06, 0x76, 0x06, 0x09, 0x07, 0x0A, 0x07, 0x0D, 0x07, 0x2E, 0x07, 0x5B, 0x07, 0x5D, 0x07, 0x62, 0x07, 0x66, 0x07, 0x68, 0x07, 0x22, 0x08, 0x31, 0x08, 0x53, 0x08, 0x71, 0x08, 0x7A, 0x08, 0x32, 0x09, 0x33, 0x09, 0x3A, 0x09, 0x3B, 0x09, 0x41, 0x09, 0x44, 0x09, 0x45, 0x09, 0x47, 0x09, 0x49, 0x09, 0x30, 0x0A, 0x34, 0x0A, 0x35, 0x0A, 0x36, 0x0A, 0x37, 0x0A, 0x38, 0x0A, 0x39, 0x0A, 0x3F, 0x0A, 0x43, 0x0A, 0x4C, 0x0A, 0x4D, 0x0A, 0x4E, 0x0A, 0x50, 0x0A, 0x21, 0x0B, 0x42, 0x0B, 0x46, 0x0B, 0x4F, 0x0B, 0x51, 0x0B, 0x52, 0x0B, 0x54, 0x0B, 0x2D, 0x0C, 0x56, 0x0C, 0x6B, 0x0C, 0x28, 0x0D, 0x29, 0x0D, 0x48, 0x0D, 0x55, 0x0D, 0x5A, 0x0D, 0x4B, 0x0E, 0x2F, 0x11, 0x77, 0x12, 0x40, 0x13, 0x4A, 0x13, 0x58, 0x14, 0x78, 0x14, 0x57, 0x15, 0x5E, 0x15, 0x6A, 0x15, 0x79, 0x15, 0x7D, 0x15, 0x00, 0x16, 0x01, 0x16, 0x02, 0x16, 0x03, 0x16, 0x04, 0x16, 0x05, 0x16, 0x06, 0x16, 0x07, 0x16, 0x08, 0x16, 0x0B, 0x16, 0x0C, 0x16, 0x0E, 0x16, 0x0F, 0x16, 0x10, 0x16, 0x11, 0x16, 0x12, 0x16, 0x13, 0x16, 0x14, 0x16, 0x15, 0x16, 0x16, 0x16, 0x17, 0x16, 0x18, 0x16, 0x19, 0x16, 0x1A, 0x16, 0x1B, 0x16, 0x1C, 0x16, 0x1D, 0x16, 0x1E, 0x16, 0x1F, 0x16, 0x23, 0x16, 0x24, 0x16, 0x25, 0x16, 0x26, 0x16, 0x2A, 0x16, 0x2B, 0x16, 0x3C, 0x16, 0x3D, 0x16, 0x3E, 0x16, 0x59, 0x16, 0x5C, 0x16, 0x5F, 0x16, 0x60, 0x16, 0x7B, 0x16, 0x7C, 0x16, 0x7E, 0x16, 0x7F, 0x16, 0x80, 0x16, 0x81, 0x16, 0x82, 0x16, 0x83, 0x16, 0x84, 0x16, 0x85, 0x16, 0x86, 0x16, 0x87, 0x16, 0x88, 0x16, 0x89, 0x16, 0x8A, 0x16, 0x8B, 0x16, 0x8C, 0x16, 0x8D, 0x16, 0x8E, 0x16, 0x8F, 0x16, 0x90, 0x16, 0x91, 0x16, 0x92, 0x16, 0x93, 0x16, 0x94, 0x16, 0x95, 0x16, 0x96, 0x16, 0x97, 0x16, 0x98, 0x16, 0x99, 0x16, 0x9A, 0x16, 0x9B, 0x16, 0x9C, 0x16, 0x9D, 0x16, 0x9E, 0x16, 0x9F, 0x16, 0xA0, 0x16, 0xA1, 0x16, 0xA2, 0x16, 0xA3, 0x16, 0xA4, 0x16, 0xA5, 0x16, 0xA6, 0x16, 0xA7, 0x16, 0xA8, 0x16, 0xA9, 0x16, 0xAA, 0x16, 0xAB, 0x16, 0xAC, 0x16, 0xAD, 0x16, 0xAE, 0x16, 0xAF, 0x16, 0xB0, 0x16, 0xB1, 0x16, 0xB2, 0x16, 0xB3, 0x16, 0xB4, 0x16, 0xB5, 0x16, 0xB6, 0x16, 0xB7, 0x16, 0xB8, 0x16, 0xB9, 0x16, 0xBA, 0x16, 0xBB, 0x16, 0xBC, 0x16, 0xBD, 0x16, 0xBE, 0x16, 0xBF, 0x16, 0xC0, 0x16, 0xC1, 0x16, 0xC2, 0x16, 0xC3, 0x16, 0xC4, 0x16, 0xC5, 0x16, 0xC6, 0x16, 0xC7, 0x16, 0xC8, 0x16, 0xC9, 0x16, 0xCA, 0x16, 0xCB, 0x16, 0xCC, 0x16, 0xCD, 0x16, 0xCE, 0x16, 0xCF, 0x16, 0xD0, 0x16, 0xD1, 0x16, 0xD2, 0x16, 0xD3, 0x16, 0xD4, 0x16, 0xD5, 0x16, 0xD6, 0x16, 0xD7, 0x16, 0xD8, 0x16, 0xD9, 0x16, 0xDA, 0x16, 0xDB, 0x16, 0xDC, 0x16, 0xDD, 0x16, 0xDE, 0x16, 0xDF, 0x16, 0xE0, 0x16, 0xE1, 0x16, 0xE2, 0x16, 0xE3, 0x16, 0xE4, 0x16, 0xE5, 0x16, 0xE6, 0x16, 0xE7, 0x16, 0xE8, 0x16, 0xE9, 0x16, 0xEA, 0x16, 0xEB, 0x16, 0xEC, 0x16, 0xED, 0x16, 0xEE, 0x16, 0xEF, 0x16, 0xF0, 0x16, 0xF1, 0x16, 0xF2, 0x16, 0xF3, 0x16, 0xF4, 0x16, 0xF5, 0x16, 0xF6, 0x16, 0xF7, 0x16, 0xF8, 0x16, 0xF9, 0x16, 0xFA, 0x16, 0xFB, 0x16, 0xFC, 0x16, 0xFD, 0x16, 0xFE, 0x16, 0xFF, 0x16
};

template<typename T>
std::pair<T, bool> raw_read(std::istream& input) {
	T buffer = 0;
	input.read(reinterpret_cast<char*>(&buffer), sizeof(buffer));

	if (input.eof()) {
		return std::pair<T, bool>(0, false);
	}

	return std::pair<T, bool>(buffer, true);
}

template<typename T>
void raw_write(std::ostream& output, T value) {
	output.write(reinterpret_cast<char*>(&value), sizeof(value));
}

class bit_reader {
private:
	std::istream& input_;
	uint8_t buffer_ = 0;
	uint8_t bits_in_buffer_ = 0;
public:
	bit_reader(std::istream& input) : input_(input) {};

	std::pair<uint8_t, bool> read_bit() {

		if (bits_in_buffer_ == 0) {
			auto read_buffer = raw_read <uint8_t>(input_);

			if (!read_buffer.second) {
				return std::pair<bool, bool>(false, false);
			}

			buffer_ = read_buffer.first;
			bits_in_buffer_ = 8;
		}

		uint8_t value = (buffer_ >> (bits_in_buffer_ - 1)) & 1;
		bits_in_buffer_--;

		return std::pair<uint8_t, bool>(value, true);
	}

	std::pair<uint64_t, bool> read_number(uint8_t bits_to_read) {

		uint64_t value = 0;

		while (bits_to_read > 0) {
			auto bit_value = read_bit();

			if (!bit_value.second) {
				return std::pair<uint64_t, bool>(0, false);
			}

			value <<= 1;
			value |= bit_value.first;
			bits_to_read--;
		}

		return std::pair<uint64_t, bool>(value, true);
	}
};

class bit_writer {
private:
	std::ostream& output_;
	uint8_t buffer_ = 0;
	uint8_t bits_in_buffer_ = 0;
public:
	bit_writer(std::ostream& output) : output_(output) {};

	void write_bit(uint8_t value) {

		buffer_ <<= 1;
		buffer_ |= value;
		bits_in_buffer_++;

		if (bits_in_buffer_ == 8) {
			raw_write<uint8_t>(output_, buffer_);
			buffer_ = 0;
			bits_in_buffer_ = 0;
		}
	}

	void write_number(uint64_t value, uint8_t bits_to_write) {

		while (bits_to_write > 0) {
			uint8_t bit = (value >> (bits_to_write - 1)) & 1;
			write_bit(bit);
			bits_to_write--;
		}
	}

	~bit_writer() {
		while (bits_in_buffer_ > 0) {
			write_bit(1); // padding with 1 instead of 0
		}
	}
};

hufstr::hufstr() {

	for (size_t i = 0; i < table.size(); i+=2) {

		auto symbol = table[i];
		auto length = table[i+1];

		auto& symbol_data = symbols_data_[symbol];
		symbol_data.sym = symbol;
		symbol_data.len = length;

		sorted_symbol_data_.push_back(symbol_data);
	}

	uint8_t len = 0;
	uint32_t code = 0;
	for (auto& item : sorted_symbol_data_) {
		auto& symbol_data = symbols_data_[item.get().sym];
		code <<= (symbol_data.len - len);
		len = symbol_data.len;
		symbol_data.code = code;
		++code;
	}
}

std::vector<uint8_t> hufstr::compress(const std::string& s) const {

	std::ostringstream writer;

	{
		bit_writer bit_writer(writer);

		for (const auto& symbol : s) {
			auto const& symbol_data = symbols_data_.at(symbol);
			bit_writer.write_number(symbol_data.code, symbol_data.len);
		}
	}

	std::vector<uint8_t> data;

	for (const auto& item : writer.str()) {
		data.push_back(item);
	}

	return data;
}

std::string hufstr::decompress(const std::vector<uint8_t>& v) const {

	std::string out_string;

	std::string buffer(v.begin(), v.end());
	std::istringstream reader(buffer);
	bit_reader bit_reader(reader);

	uint32_t read_code = 0;
	uint8_t bits_in_code = 0;

	while (true) {
		auto read_bit = bit_reader.read_bit();

		if (!read_bit.second) {
			break;
		}

		read_code <<= 1;
		read_code |= read_bit.first;
		bits_in_code++;

		for (auto& item : sorted_symbol_data_) {

			const auto& symbol_data = item.get();

			if (read_code == symbol_data.code && bits_in_code == symbol_data.len) {
				out_string.push_back(symbol_data.sym);
				read_code = 0;
				bits_in_code = 0;
				break;
			}
		}
	}

	return out_string;
}